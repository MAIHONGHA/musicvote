cv.interface.fragments.filter(f => f.type === "function").map(f => f.format("full"))
  .map(f => f.format("full"))
  .filter(f => f.type === "function")
cv.interface.fragments
Object.keys(cv.functions)
cv.target
const cv = Factory.attach("0x5fDb2315678aFecb367cf93d93F64180aa3");
const Factory = await ethers.getContractFactory("ConfidentialVoting");
await contract.someReadFunction();
const contract = await Factory.attach("0x5fDb2315678aFecb367cf93d93F64180aa3...");
const Factory = await ethers.getContractFactory("ConfidentialVoting");
const contract = await Contract.attach("0x5FbDB2315678afecb367f032d93F642f64180aa3");
console.log("bal1 ETH:", ethers.formatEther(bal1));
console.log("bal0 ETH:", ethers.formatEther(bal0));
const bal1 = await ethers.provider.getBalance(addr1);
const bal0 = await ethers.provider.getBalance(addr0);
});
  value: ethers.parseEther("1.0"),
  to: addr1,
await accts[0].sendTransaction({
const addr1 = await accts[1].getAddress();
const addr0 = await accts[0].getAddress();
const accts = await ethers.getSigners();
const addr1 = await accts[1].getAddress();
const addr0 = await accts[0].getAddress();
const accts = await ethers.getSigners();
}); exit
  value: ethers.utils.parseEther("1.0")
  to: addr1,
await acct0.sendTransaction({
console.log("bal1 ETH:", ethers.formatEther(bal1)) npx hardhat console --network localhost
console.log("bal0 ETH:", ethers.formatEther(bal0))
bal1 = await ethers.provider.getBalance(addr1)
bal0 = await ethers.provider.getBalance(addr0)
console.log("addr1:", addr1)
console.log("addr0:", addr0)
addr1 = await accts[1].getAddress()
addr0 = await accts[0].getAddress()
accts = await ethers.getSigners()
)accts = await ethers.getSigners()
  await ethers.provider.getBalance(await accts[0].getAddress())
ethers.utils.formatEther(
accts[0].addressethers.utils.formatEther(await ethers.provider.getBalance(await accts[0].getAddress()))
accts[0].address(await ethers.provider.getBalance(accts[0].address)).toString()
const accts = await ethers.getSigners()
(await ethers.provider.getBlockNumber()).toString()